Name of the Project : Employee Management System

Description :
		 Employees are the backbone of any company therefore their contribution plays a major role in deciding the success of an organization. Employees Management Software makes it easy for the employer to keep track of all records. This software allows the administrator to edit employees, add new employees, transfer/promote/terminate employees. You can check to see if there are duplicate positions/employees in the database. A flexible and easy to use Employee Management software solution for small and medium sized companies provides modules for personnel information management thereby organization and companies are able to manage the crucial information.This system brings about an easy way of maintaining the details of employees working in any organization.The goal of this project is to design and develop an employee management system to fill existing gaps in the electronic management of employees.

Development :
 		In every Project we have two phases one is Backend and another one is Frontend.

coming to Backend phase we used Spring-Tool-suite(STS) as a Tool and Spring-boot Technology 

Project-Structure
-----------------
Employee-management
	|
	|---src/main/java
		|
		|---com.ihub.www (base package)
			|
			|---EmployeeManagementApplication.java
		|
		|---com.ihub.www.controller
			|
			|---EmployeeController.java
		|
		|---com.ihub.www.service		
			|
			|---EmployeeService.java
		|
		|---com.ihub.www.repo
			|
			|---EmployeeRepository.java (interface)
		|
		|---com.ihub.www.model 
			|
			|---Employee.java
		|
		|---com.ihub.www.exception
			|
			|---ResourceNotFoundException.java
			
	|
	|---src/main/resources
	|	|
	|	|----application.properties
	|
	|
	|---pom.xml 


In this we will use dependencys like spring-web,spring data jpa,mysql Database.


EmployeeController
------------------
 In this we use a Rest Controller annotation. Which is combination of two annotations one is @controller and another one is     @ResponseBody.

It is a class level annotation.

It will handel the request which is coming from the RequestDispatcher as Http Request.

In this we use different RestApi Methods like @GetMapping,@PutMapping,@DeleteMapping,@PostMapping.

In this we use @RequestMapping annotation which is used to map the request address.

In this we use @CrossOrigin Annotation for connection with frontend.

Using @Autowired annotation we can perform automatic Dependency Injection.Dependency Injection is a technique where one object supplies the dependies of another object.

By using @Autowired annotation we created a object for Service method in the controller where our methods present in Controller are transferred to EmployeeService class present in com.ihub.www.service package.

Controller-logic
---------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.services.EmployeeService;
@CrossOrigin(origins ="http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
   @Autowired
   EmployeeService empserv;
   
   @GetMapping("/employees")
   public List<Employee> getAllEmployees()
   {
	   return empserv.getAllEmployees();
   }
   @PostMapping("/employees")
   public Employee createEmployee(@RequestBody Employee employee)
   {
	   return empserv.createEmployee(employee);
   }
   @GetMapping("/employees/{id}")
   public Employee getEmployeeById(@PathVariable Long id)
   {
	   return empserv.getEmployeeById(id);
   }
   @PutMapping("/employees/{id}")
   public ResponseEntity<Employee> updateEmployee(@PathVariable Long id,@RequestBody Employee employee)
   {
	   return empserv.updateEmployee(id,employee);
   }
   @DeleteMapping("/employees/{id}")
   public ResponseEntity<HttpStatus> deleteEmployee(@PathVariable long id)
   {
	   return empserv.deleteEmployee(id);
   }
}


EmployeeService
---------------
In service We create a object of Repository interface by using @AutoWired annotation.

All the methods present in this will refer to Repository Interface.

Bussines logic will be written in  this class


Service-logic
------------
package com.ihub.www.services;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.ihub.www.exception.ResourceNotFoundException;
import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository emprepo;
	
	public List<Employee> getAllEmployees()
	   {
		   return emprepo.findAll();
	   }
	public Employee createEmployee( Employee employee)
	   {
		   return emprepo.save(employee);
	   }
	   public Employee getEmployeeById(Long id)
	   {
		   return emprepo.findById(id).orElseThrow(() -> new ResourceNotFoundException("id not found"));
	   }
	   public ResponseEntity<Employee> updateEmployee(Long id, Employee employee)
	   {

	Employee emp=emprepo.findById(id).orElseThrow(() -> new ResourceNotFoundException("Employee Does not exist"));
			emp.setFname(employee.getFname());
			emp.setLname(employee.getLname());
			emp.setEmail(employee.getEmail());
			Employee updateEmp=emprepo.save(emp);
			return ResponseEntity.ok(updateEmp);

	   }
	   public ResponseEntity<HttpStatus> deleteEmployee(long id)
	   {
		 Employee emp=emprepo.findById(id).orElseThrow(()->new ResourceNotFoundException("Employee Does not exist"));
		   emprepo.delete(emp);
		   return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	   }
	

}


Employee-Repository
--------------------
In this we use @Repository annotation to indicate that they are dealing with JpaRepository it will deal with the database.

In this we will extend the repository with jpa Repository and pass a parameter as Employee model class(which is in com.ihub.www.model package) and Primary key Datatype.

JpaRepository it is a combination of CRUD and Paging&sorting Repository which will add some methods like flush etc.

CRUD means create,Read,Update,Delete and it contains some methods like findAll(),save(),findOne(),delete().

findAll():this method is used to return the data found in the database.

save(): this metod is used to insert the data which is send from the postMapping Request.

findOne():this method is used to return the data found in the database.

delete():this method is used to delete the data from the database.

Repository-logic
----------------

package com.ihub.www.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.ihub.www.model.Employee;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long>
{

}



Employee-model
--------------
In this we used two new annotations @Entity and @Table.

@Table: it is used to create a table in database.

@Entity: It is persistence java object that is mapping to a database table.

@Id: It is used to set the column as primery key.

@Column : It is used to declare the column of the table.

among this we use the private variables in the class and a constructor to pass the details.

we use some setters and getters for set and getting the data.

employee-logic
---------------
package com.ihub.www.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table


public class Employee {
	public Employee() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Employee(long id, String fname, String lname, String email) {
		super();
		this.id = id;
		this.fname = fname;
		this.lname = lname;
		this.email = email;
	}
	public long getId() {
		return id;
	}
	public void setId(long id) {
		this.id = id;
	}
	public String getFname() {
		return fname;
	}
	public void setFname(String fname) {
		this.fname = fname;
	}
	public String getLname() {
		return lname;
	}
	public void setLname(String lname) {
		this.lname = lname;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	@Column
	private String fname;
	@Column
	private String lname;
	@Column
	private String email;
}



Application.properties
----------------------

In this file we use to set or change the server port number and we can provide MySQL database details.

Like driver class name of MySQL and username,password.

In this we use some hibernate commands like ddl-auto and dialect.

ddl-auto: which is used to create a table in database if it is not present.

dialect: which is used to maintain the Sql queries and Schema management.


logic in application.properties 
-------------------------------
server.port=9090

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/employee_project
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect




ResourceNotFoundException 
--------------------------
In this we use @ResponseStatus annotation.This is particularly useful for customizing the HTTP response status codes in RESTful web services.

This class is extends with RuntimeException class.

package com.ihub.www.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value =HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException
{

	private static final long serialVersionUID = 1L;

	public ResourceNotFoundException(String message)
	{
		super(message);
	}

}

The declaration "private static final long serialVersionUID = 1L;" is used in Java classes that implement the Serializable interface. It serves as a version control mechanism for the serialization process.


This is all about backend project.







           